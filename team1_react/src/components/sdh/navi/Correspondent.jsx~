import { useEffect, useMemo, useRef, useState } from 'react';

function Correspondent ()
{
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');
  const [selected, setSelected] = useState([]);
  const dropdownRef = useRef(null);
  
  const correspondents = [
    '임시거래처1',
    '임시거래처2',
    '엄청엄청길어져도되는이름테스트용임시거래처',
    '임시거래처3',
    '임시거래처4',
    'ASDASD',
    'asdASD',
  ];
  
  const filtered = useMemo(() =>
    correspondents.filter(c =>
      c.toLowerCase().includes(search.toLowerCase()),
    ), [search]);
  
  useEffect(() => {
    const handler = e => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target))
      {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handler);
    return () => document.removeEventListener('mousedown', handler);
  }, []);
  
  const toggle = (name) => {
    setSelected(prev =>
      prev.includes(name)
        ? prev.filter(i => i !== name)
        : [...prev, name],
    );
  };
  
  const display = selected.length > 0
    ? `거래처 : ${selected.join(', ')}`
    : '거래처';
  
  return (
    <div className="relative inline-block" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(prev => !prev)}
        className={`h-10 max-w-[400px] px-4 rounded border truncate ${
          selected.length > 0
            ? 'bg-blue-100 text-blue-600 border-blue-300'
            : 'bg-gray-200 text-gray-800 border-gray-300'
        }`}
      >
        {display}
      </button>
      
      {isOpen && (
        <div className="absolute z-10 mt-1 w-fit min-w-[200px] max-w-[400px] bg-white border border-gray-300 rounded-md shadow-lg">
          <input
            type="text"
            value={search}
            onChange={e => setSearch(e.target.value)}
            placeholder="거래처 검색"
            className="w-full px-3 py-2 border-b outline-none focus:ring-2 focus:ring-blue-400 rounded-t-md"
          />
          <ul className="max-h-60 overflow-y-auto">
            {filtered.map((name, i) => (
              <li key={i} className="hover:bg-gray-100">
                <label className="flex items-center px-3 py-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={selected.includes(name)}
                    onChange={() => toggle(name)}
                    className="mr-2 accent-blue-500"
                  />
                  <span className="text-gray-800">{name}</span>
                </label>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

export default Correspondent;
