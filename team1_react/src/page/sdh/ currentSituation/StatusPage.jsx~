import Topline from '../../../components/layout/Topline.jsx';
import { useEffect, useState, useMemo } from 'react';
import StatusNavigation from '../../../components/sdh/navi/StatusNavigation.jsx';
import StatusTableBody from '../../../components/sdh/inventory/StatusTableBody.jsx';

function StatusPage() {
  const [selectedDepartments, setSelectedDepartments] = useState([]);
  const [selectedOutboundPerson, setSelectedOutboundPerson] = useState([]);
  const [startDate, setStartDate] = useState(() => {
    const date = new Date();
    date.setDate(date.getDate() - 6);
    return date;
  });
  const [endDate, setEndDate] = useState(new Date());
  const [tags, setTags] = useState([]);
  const [products, setProducts] = useState([]);
  
  // Date 포맷 함수 메모이제이션
  const formatDate = useMemo(() => (date, isStart = true) => {
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const dd = String(date.getDate()).padStart(2, '0');
    const hhmmss = isStart ? '00:00:00' : '23:59:59';
    return `${yyyy}-${mm}-${dd} ${hhmmss}`;
  }, []);
  
  useEffect(() => {
    const fetchProducts = async () => {
      const formattedStart = formatDate(startDate, true);
      const formattedEnd = formatDate(endDate, false);
      
      const requestBody = {
        tags,
        selectedDepartments,
        selectedOutboundPerson,
        startDate: formattedStart,
        endDate: formattedEnd,
      };
      
      try {
        const response = await fetch('http://localhost:8080/api/status/search', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody),
        });
        if (!response.ok) throw new Error('서버 오류');
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Fetch 실패:', error);
      }
    };
    
    // 조건이 변경될 때만 서버 호출
    if (tags.length || selectedDepartments.length || selectedOutboundPerson.length || startDate || endDate) {
      fetchProducts();
    }
  }, [tags, selectedDepartments, selectedOutboundPerson, startDate, endDate, formatDate]);
  
  return (
    <div className="flex-1 p-6 overflow-y-auto">
      <div className="bg-white rounded shadow p-4 min-x-[100vh] min-h-[80vh]" style={{ padding: '0px 40px 80px 40px' }}>
        <div>
          <Topline title="비품 사용 현황">
            <StatusNavigation
              selectedDepartments={selectedDepartments}
              setSelectedDepartments={setSelectedDepartments}
              selectedOutboundPerson={selectedOutboundPerson}
              setSelectedOutboundPerson={setSelectedOutboundPerson}
              startDate={startDate}
              setStartDate={setStartDate}
              endDate={endDate}
              setEndDate={setEndDate}
              tags={tags}
              setTags={setTags}
            />
            <table className="table-fixed border-collapse">
              <thead className="bg-white top-0 z-30">
              <tr className="border-b border-gray-300">
                <th className="cell-style w-[120px]">사진</th>
                <th className="cell-style w-[200px]">제품명</th>
                <th className="cell-style w-[180px]">보관위치</th>
                <th className="cell-style w-[190px]">거래처</th>
                <th className="cell-style w-[130px]">부서</th>
                <th className="cell-style w-[130px]">출고자</th>
                <th className="cell-style w-[130px]">재고변동</th>
                <th className="cell-style w-[130px]">수량</th>
                <th className="cell-style w-[200px]">출고일</th>
              </tr>
              </thead>
              <StatusTableBody products={products} />
            </table>
          </Topline>
        </div>
      </div>
    </div>
  );
}

export default StatusPage;
